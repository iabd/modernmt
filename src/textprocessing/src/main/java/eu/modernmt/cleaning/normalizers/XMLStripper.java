package eu.modernmt.cleaning.normalizers;

import eu.modernmt.cleaning.CorpusNormalizer;
import eu.modernmt.model.XMLTag;
import eu.modernmt.processing.xml.XMLCharacterEntity;

import java.util.regex.Pattern;

/**
 * Created by davide on 17/11/16.
 */
public class XMLStripper implements CorpusNormalizer {

    public static final Pattern DoubleEntityPattern = Pattern.compile("&amp;((#[0-9]{1,4})|(#x[0-9a-fA-F]{1,4})|([a-zA-Z]+));");

    private static String stripXML(String line) {
        return XMLTag.TagRegex.matcher(line).replaceAll(" ");
    }

    private static String stripDoubleEscapedEntities(String line) {
        return DoubleEntityPattern.matcher(line).replaceAll(" ");
    }

    private static boolean hasXMLEntities(String line) {
        return XMLCharacterEntity.EntityPattern.matcher(line).find();
    }

    private static String strip(String line) {
        while (true) {
            // if it has valid XML then we stop: if you put actual XML all subsequent entities should be intentional
            String plain = stripXML(line);
            if (!plain.equals(line))
                return plain;

            // if there are no double-escaped entities (i.e. &amp;lt;), problem is solved!
            String stripped = stripDoubleEscapedEntities(line);
            if (stripped.equals(line))
                return line;

            // if, excluding double-escaped entities, we found entities, it means that the first ones were intentional
            if (hasXMLEntities(stripped))
                return line;

            // if we only have double-escaped entities, we suppose those were generated by accident
            line = XMLCharacterEntity.unescapeAll(line);
        }
    }

    @Override
    public String normalize(String line) {
        return strip(line).trim();
    }

}
